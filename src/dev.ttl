#######################
# Developer constants #
#######################

hmas:PathToBaseURI a rdf:List ;
    rdf:first prov:used ;
    rdf:rest ( td:baseURI ) .

hmas:forApplicatonJson a sh:PropertyShape ;
    sh:path hctl:forContentType ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
    sh:hasValue "application/json" .

hmas:forTextTurtle a sh:PropertyShape ;
    sh:path hctl:forContentType ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
    sh:hasValue "text/turtle" .

hmas:FipaMessagingProtocol a sh:PropertyShape ;
    sh:path hctl:forSubprotocol ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
    sh:hasValue "fipa.mts.mtp.http.std" .

hmas:GetMethod a sh:PropertyShape ;
    sh:path htv:methodName ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
    sh:hasValue "GET" .

hmas:PutMethod a sh:PropertyShape ;
    sh:path htv:methodName ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
    sh:hasValue "PUT" .

hmas:PostMethod a sh:PropertyShape ;
    sh:path htv:methodName ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
    sh:hasValue "POST" .

hmas:DeleteMethod a sh:PropertyShape ;
    sh:path htv:methodName ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
    sh:hasValue "DELETE" .

hmas:InvokeAction a sh:PropertyShape ;
    sh:path hctl:hasOperationType ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
    sh:hasValue td:invokeAction .

hmas:ReadAction a sh:PropertyShape ;
    sh:path hctl:hasOperationType ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
    sh:hasValue td:readProperty .

hmas:AuthorizationHeader a sh:NodeShape ;
    sh:class hmas:ActionExecution ;
    sh:property [
        sh:path (
            prov:used
            htv:headers
            [sh:zeroOrMorePath rdf:rest]
            rdf:first
        ) ;
        sh:minQualifiedShape 1 ;
        sh:maxQualifiedShape 1 ;
        sh:qualifiedValueShape [
            sh:class htv:messageHeader ;
            sh:property [
                sh:path htv:fieldName ;
                sh:minCount 1 ;
                sh:maxCount 1 ;
                sh:hasValue "Authorization"
            ] , [
                sh:path htv:fieldValue ;
                sh:minCount 1 ;
                sh:maxCount 1 ;
                sh:datatype xsd:string
            ]
        ]
    ] .

hmas:SlugHeader a sh:NodeShape ;
    sh:class hmas:ActionExecution ;
    sh:property [
        sh:path (
            htv:headers
            [sh:zeroOrMorePath rdf:rest]
            rdf:first
        ) ;
        sh:minQualifiedShape 1 ;
        sh:maxQualifiedShape 1 ;
        sh:qualifiedValueShape [
            sh:class htv:messageHeader ;
            sh:property [
                sh:path htv:fieldName ;
                sh:minCount 1 ;
                sh:maxCount 1 ;
                sh:hasValue "Slug"
            ] , [
                sh:path htv:fieldValue ;
                sh:minCount 1 ;
                sh:maxCount 1 ;
                sh:datatype xsd:string
            ]
        ]
    ] .

hmas:XAgentWebIDHeader a sh:NodeShape ;
    sh:class hmas:ActionExecution ;
    sh:property [
        sh:path (
            htv:headers
            [sh:zeroOrMorePath rdf:rest]
            rdf:first
        ) ;
        sh:minQualifiedShape 1 ;
        sh:maxQualifiedShape 1 ;
        sh:qualifiedValueShape [
            sh:class htv:messageHeader ;
            sh:property [
                sh:path htv:fieldName ;
                sh:minCount 1 ;
                sh:maxCount 1 ;
                sh:hasValue "X-Agent-WebID"
            ] , [
                sh:path htv:fieldValue ;
                sh:minCount 1 ;
                sh:maxCount 1 ;
                sh:datatype xsd:string
            ]
        ]
    ] .
# Messaging #

:FIPAMessageForm a sh:NodeShape ;
    sh:class hctl:Form ;
    sh:property hmas:FipaMessagingProtocol, hmas:InvokeAction, [
        sh:path hctl:hasTarget ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:hasValue ""
    ] .

:AgentMessage a sh:PropertyShape ;
    sh:path fipa:hasSender ; # specifies that the sender should be an agent
    sh:class hmas:Agent;
    sh:minCount 1;
    sh:maxCount 1 .

:Request a sh:PropertyShape ;
    sh:path fipa:hasPerformative ; # specifies that the performative should be fipa:agree
    sh:hasValue fipa:request ;
    sh:minCount 1 ;
    sh:maxCount 1 .

:Agree a sh:PropertyShape ;
    sh:path fipa:hasPerformative ; # specifies that the performative should be fipa:agree
    sh:hasValue fipa:agree ;
    sh:minCount 1 ;
    sh:maxCount 1 .

:Refuse a sh:PropertyShape ;
    sh:path fipa:hasPerformative ;
    sh:hasValue fipa:refuse ;
    sh:minCount 1 ;
    sh:maxCount 1 .

:Failure a sh:PropertyShape ;
    sh:path fipa:hasPerformative ;
    sh:hasValue fipa:failure ;
    sh:minCount 1 ;
    sh:maxCount 1 .

:InformDone a sh:PropertyShape ;
    sh:path fipa:informDone ;
    sh:hasValue fipa:informDone ;
    sh:minCount 1 ;
    sh:maxCount 1 .

:InformResult a sh:PropertyShape ;
    sh:path fipa:informDone ;
    sh:hasValue fipa:informResult ;
    sh:minCount 1 ;
    sh:maxCount 1 .

:InteractionOrder a sh:PropertyShape ;
    sh:path fipa:hasContent ; # specifies that the content should be an action execution specification
    sh:minQualifiedShape 1 ;
    sh:maxQualifiedShape 1 ;
    sh:qualifiedValueShape [ sh:class hmas:ActionExecution ] .

:FIPASL a sh:PropertyShape ;
    sh:path fipa:hasLanguage ;
    sh:hasValue fipa:FIPASL ; # specifies that the content should be expressed in the FIPA SL Content Language
    sh:minCount 1 ;
    sh:maxCount 1 .

:WorkspaceProfileSpecification a sh:NodeShape ;
    sh:class :ResourceProfile ;
    sh:property [ 
        sh:path :isProfileOf ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:datatype :Workspace   
    ] .

:ArtifactProfileSpecification a sh:NodeShape ;
    sh:class :ResourceProfile ;
    sh:property [ 
        sh:path :isProfileOf ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:datatype :Artifact
    ] .
    
